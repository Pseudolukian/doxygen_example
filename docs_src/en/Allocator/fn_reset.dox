/**
@ingroup AllocatorGroup
@fn void AlignedAllocator::reset()
@brief Resets the allocator to its initial state.

@details
The method resets the current position in the memory pool to its start, setting the `current` pointer to the value of `base`. This allows the allocator to begin allocating memory anew, as if the pool were freshly created. All previously allocated memory blocks, obtained via @ref AlignedAllocator::allocate "allocate()", become invalid, as subsequent calls to `allocate` may overwrite their contents.
After calling `reset`, subsequent calls to @ref AlignedAllocator::allocate "allocate()" will start allocating memory from the beginning of the pool (`base`), disregarding previously allocated blocks. This differs from the destructor (@ref AlignedAllocator::~AlignedAllocator "~AlignedAllocator()"), which frees the memory using `std::free`.

@warning
- All pointers returned by previous calls to `allocate` become invalid, as new allocations may overwrite their contents. Attempting to access such pointers will lead to undefined behavior (e.g., reading invalid data or program crashes).
- The method does not throw exceptions, as it performs a simple pointer assignment and requires no additional checks, since `base` is guaranteed to be set in the constructor.

@par Example:
@code
AlignedAllocator alloc(1024, 64);
void* ptr1 = alloc.allocate(256); // Allocates 256 bytes
alloc.reset();                    // Resets the allocator
void* ptr2 = alloc.allocate(128); // New block overwrites the poolâ€™s start
// ptr1 is now invalid!
@endcode
*/