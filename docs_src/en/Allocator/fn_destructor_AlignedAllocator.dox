/**
@fn AlignedAllocator::~AlignedAllocator()
@brief Destructor â€” frees the memory pool.

@details
The destructor automatically frees all memory allocated for the pool using the `std::free` function. The destructor is invoked automatically when the `AlignedAllocator` object goes out of scope.

The `std::free` function, defined in the `<cstdlib>` header, is used to deallocate memory previously allocated by functions such as `malloc`, `calloc`, `realloc`, or, in this case, `posix_memalign`. `std::free` takes a pointer to the start of the memory block (in this case, `base`, of type `std::uint8_t*`, which was cast from the `void*` returned by `posix_memalign`). The function returns this memory block to the operating system, marking it as free for reuse.

Memory allocated by `posix_memalign` is compatible with `std::free`, as `posix_memalign` is part of the POSIX family of memory management functions that use the same heap mechanism as `malloc`. After calling `std::free(base)`, the entire memory pool (of size `pool_size`) is freed with a single call, as the pool was allocated as a single block.

The `base` pointer stores the starting address of the memory pool, set in the constructor. The destructor uses `base` (not `current`) because `std::free` requires the pointer to the start of the allocated block, as returned by `posix_memalign`.

@warning
- Do not use the `base` or `current` pointers after the destructor is called, as the memory is freed, and accessing it will lead to undefined behavior (e.g., program crashes).
- Ensure that the memory pointed to by `base` was allocated using `posix_memalign` (or another compatible function), as `std::free` only works correctly with such blocks.
*/