/**
@fn void LogWriter::run()
@brief Основной цикл обработки логов в рабочем потоке.

@details 
Метод выполняется в рабочем потоке, созданном в конструкторе LogWriter, и непрерывно обрабатывает записи логов из буфера до установки флага завершения. Выполняет следующие действия:
- Проверяет атомарный флаг `shutdown_flag` с использованием `std::memory_order_acquire`. Если флаг равен `true`, цикл завершается, и поток останавливается.
- Вызывает `buffer.consume()` для извлечения указателя на `LogEntry` из lock-free очереди. Если очередь пуста, возвращается `nullptr`.
- Если запись (`LogEntry`) получена, форматирует её в строку вида `[timestamp] [TID thread_id] [level] message\n`:
  - `timestamp`: время создания записи в миллисекундах с начала эпохи.
  - `thread_id`: идентификатор потока, создавшего запись.
  - `level`: строковое представление уровня лога (INFO, WARNING, ERROR), полученное через `level_to_string()`.
  - `message`: текст сообщения лога.
- Записывает отформатированную строку в файл через `out` (std::ofstream), открытый в режиме добавления.
- Если очередь пуста (`consume()` вернул `nullptr`), вызывает `std::this_thread::yield()` для уступки управления другим потокам, минимизируя нагрузку на процессор.

Метод обеспечивает асинхронную и потокобезопасную запись логов, используя lock-free очередь для извлечения записей и синхронизацию через атомарный флаг для завершения.

@note 
- Метод не освобождает память, выделенную под `LogEntry`. Освобождение должно выполняться внешним механизмом (например, в `LogBuffer` или выше по цепочке).
- Использование `std::memory_order_acquire` гарантирует корректную видимость изменений `shutdown_flag`, установленных в методе `shutdown()`.

@see LogWriter::shutdown
@see LogBuffer::consume
*/