/**
@class LogBuffer
@brief Потокобезопасный буфер для записи логов с использованием очереди без блокировки.
@details 
Класс LogBuffer предоставляет механизм для потокобезопасного логирования сообщений. 
Он использует очередь без блокировки для хранения записей логов и выровненный аллокатор для управления памятью. 
Выделение памяти сериализуется с помощью мьютекса, так как аллокатор не является потокобезопасным.

@fn LogBuffer::LogBuffer(std::size_t capacity, AlignedAllocator& allocator)
@brief Конструктор класса LogBuffer.
@details Инициализирует буфер с заданной емкостью очереди и ссылкой на аллокатор. Использует список инициализации для настройки членов класса.
@par [in] capacity Емкость очереди для хранения записей логов.
@par [in] allocator Ссылка на выровненный аллокатор памяти.

@var LogBuffer::allocator
Инициализирует член allocator ссылкой на переданный аллокатор.
Используется для выделения памяти под записи логов (объекты LogEntry).

@var LogBuffer::queue
Инициализирует очередь с заданной емкостью и аллокатором.
Обеспечивает потокобезопасное добавление и извлечение записей логов.

@var LogBuffer::mutex 
Мьютекс для сериализации выделения памяти. 
Обеспечивает потокобезопасность при вызове метода allocate аллокатора.

@fn LogBuffer::log(LogLevel level, const char* message)
@brief Добавляет запись лога в очередь.
@details Создает новую запись лога с указанным уровнем и сообщением, выделяя память через аллокатор, и добавляет ее в очередь. Выделение памяти защищено мьютексом.
@par [in] level Уровень логирования (INFO, WARNING, ERROR).
@par [in] message Текстовое сообщение лога (C-строка).
@return true, если запись добавлена успешно; false, если выделение памяти не удалось или очередь полна.

@fn LogBuffer::consume()
@brief Извлекает запись лога из очереди.
@details Возвращает указатель на запись лога, удаляя ее из очереди. Если очередь пуста, возвращается nullptr.
@return Указатель на LogEntry или nullptr, если очередь пуста.
*/