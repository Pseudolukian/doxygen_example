/**
@ingroup Logger_Group
@fn LogEntry::LogEntry(LogLevel lvl, const char* msg) 
@brief Параметризованный конструктор.
@param lvl Уровень логирования (INFO, WARNING, ERROR).
@param msg Сообщение для записи в лог. Должно быть строкой, не превышающей 256 символов.

@var LogEntry::LogEntry::timestamp Временная метка создания записи лога.
Содержит время создания записи, полученное через `std::chrono::steady_clock::now()`. Используется для отслеживания момента события.

@var LogEntry::LogEntry::thread_id Идентификатор потока, создавшего запись лога.
Хранит идентификатор текущего потока, полученный через `std::this_thread::get_id()`. Позволяет различать записи от разных потоков.

@var LogEntry::LogEntry::level Уровень логирования записи.
Указывает важность события (INFO, WARNING, ERROR), заданную при создании записи.


@details 
Инициализирует все поля структуры:
- Устанавливает `timestamp` в текущее время с помощью std::chrono::steady_clock::now().
- Фиксирует `thread_id` текущего потока через std::this_thread::get_id().
- Присваивает `level` переданное значение из перечисления LogLevel.
- Копирует переданное сообщение msg в поле message с помощью std::strncpy.

@note Размер поля `message` ограничен 256 символами. Если переданное сообщение длиннее, оно будет усечено.
Для сообщений большей длины рекомендуется использовать альтернативные механизмы логирования.

@warning В многопоточных приложениях необходимо обеспечить синхронизацию доступа к общему хранилищу логов, так как сама структура не предоставляет встроенных механизмов синхронизации.
*/