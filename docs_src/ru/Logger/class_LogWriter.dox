/**
@class LogWriter
@brief Класс для асинхронной записи логов в файл.
@details Класс LogWriter обеспечивает асинхронное сохранение записей логов, полученных из LogBuffer, в указанный файл. Он запускает отдельный рабочий поток для обработки записей логов, форматирует их в читаемый вид и записывает в файл. Класс поддерживает корректное завершение работы с помощью метода shutdown и автоматически завершает поток при уничтожении объекта.

@privatesection
@var LogWriter::buffer
@brief Ссылка на буфер логов.
@details Используется для получения записей логов (объектов LogEntry) методом consume. Инициализируется в конструкторе ссылкой на переданный LogBuffer.

@var LogWriter::shutdown_flag
@brief Атомарный флаг для управления завершением рабочего потока.
@details Устанавливается в true для остановки цикла обработки логов в методе run. Использует операции с памятью (memory_order_acquire/release) для потокобезопасности.

@var LogWriter::out
@brief Поток вывода для записи логов в файл.
@details Представляет открытый файл для добавления отформатированных записей логов. Инициализируется в конструкторе с заданным именем файла.

@var LogWriter::worker
@brief Рабочий поток для асинхронной обработки логов.
@details Запускается в конструкторе и выполняет метод run для обработки записей логов. Завершается при вызове shutdown или в деструкторе.

@publicsection
@fn LogWriter::LogWriter(LogBuffer& buffer, const std::string& filename)
@brief Конструктор класса LogWriter.
@details Инициализирует объект LogWriter с ссылкой на буфер логов и именем файла для записи. Открывает файл в режиме добавления и запускает рабочий поток для асинхронной обработки логов. Если файл не удалось открыть, выбрасывается исключение std::runtime_error.
@par [in] buffer Ссылка на объект LogBuffer, из которого будут извлекаться записи логов.
@par [in] filename Имя файла, в который будут записываться логи.
@par Список инициализации
@par buffer(buffer): Инициализирует член buffer ссылкой на переданный LogBuffer.
@par shutdown_flag(false): Инициализирует флаг завершения значением false.
@par out(filename, std::ios::out | std::ios::app): Открывает файл для записи в режиме добавления.

@fn void LogWriter::shutdown()
@brief Завершает работу рабочего потока.
@details Устанавливает флаг завершения и ожидает завершения рабочего потока, если он активен. Используется для корректной остановки обработки логов.

@fn LogWriter::~LogWriter()
@brief Деструктор класса LogWriter.
@details Вызывает метод shutdown для завершения рабочего потока и корректного закрытия ресурсов.

@privatesection
@fn void LogWriter::run()
@brief Основной цикл обработки логов в рабочем потоке.
@details Непрерывно извлекает записи логов из буфера, форматирует их (включая временную метку, идентификатор потока, уровень лога и сообщение) и записывает в файл. Завершает работу при установке флага shutdown_flag. Если буфер пуст, поток уступает управление (yield).

@fn const char* LogWriter::level_to_string(LogLevel lvl)
@brief Преобразует уровень лога в строковое представление.
@details Возвращает строковое имя уровня лога (INFO, WARNING, ERROR) на основе значения перечисления LogLevel. Для неизвестных уровней возвращает "UNKNOWN".
@par [in] lvl Уровень лога (INFO, WARNING, ERROR).
@return Указатель на C-строку с именем уровня лога.
*/