/**
@ingroup Lock_free_queue_Group
@fn LockFreeQueue(std::size_t capacity, AlignedAllocator& allocator)
@brief Конструктор класса, реализующий неблокирующую очередь.
@tparam T Тип элементов, хранящихся в очереди.

@param [in] capacity Размер очереди.
@param [in] allocator Аллокатор для выделения памяти.

@details
Конструктор инициализирует неблокирующую очередь, готовую принимать указатели на элементы типа `T` через метод `enqueue` и выдавать их через `dequeue`.
Атомарные переменные `head` и `tail` обеспечивают безопасную работу в многопоточной среде без блокировок.

1. Инициализируются члены класса:
   - `capacity` задаёт максимальное количество элементов в очереди.
   - `allocator` используется для выделения памяти.
   - `head` и `tail` — атомарные указатели на начало и конец очереди, изначально равны 0, выравниваются по 64 байта для предотвращения false sharing.

2. Выделяется память под массив указателей `buffer` размером `capacity` с помощью аллокатора:
@code{.cpp}
buffer = reinterpret_cast<T**>(allocator.allocate(sizeof(T*) * capacity));
@endcode

3. Все элементы массива `buffer` инициализируются значением `nullptr`, обозначая пустую очередь:
@code{.cpp}
for (size_t i = 0; i < capacity; ++i) {
    buffer[i] = nullptr;
}
@endcode


*/