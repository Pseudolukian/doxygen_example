/**
@fn LockFreeQueue::dequeue()
@brief Извлекает указатель на элемент из начала очереди.

@details
Метод `dequeue` извлекает указатель на элемент из начала очереди в неблокирующем режиме. Алгоритм безопасен для многопоточной среды за счёт использования атомарных операций и правильной синхронизации памяти. 

Выполняются следующие шаги:

1. Получение текущего значения указателя `head` с использованием `std::memory_order_relaxed`, так как на этом этапе строгая синхронизация не требуется:
   @code{.cpp}
   auto current_head = head.load(std::memory_order_relaxed);
   @endcode

2. Проверка, не пуста ли очередь.
   Сравнивается `current_head` с текущим значением `tail`, полученным с использованием `std::memory_order_acquire` для гарантии видимости всех предыдущих операций чтения:
   @code{.cpp}
   if (current_head == tail.load(std::memory_order_acquire)) {
       return nullptr; // queue is empty
   }
   @endcode
   Если `current_head` равен `tail`, очередь пуста, и возвращается `nullptr`.

3. Извлечение элемента из буфера.
   Указатель на элемент типа `T` считывается из массива `buffer` по индексу `current_head`:
   @code{.cpp}
   T* item = buffer[current_head];
   @endcode

4. Обновление указателя `head`.
   Значение `head` атомарно обновляется до следующей позиции с учётом циклического буфера, используя `std::memory_order_release` для гарантии, что операция чтения элемента видна другим потокам:
   @code{.cpp}
   head.store((current_head + 1) % capacity, std::memory_order_release);
   @endcode

5. Возврат результата.
   Возвращается указатель на извлечённый элемент:
   @code{.cpp}
   return item;
   @endcode

@note Вызывающая сторона отвечает за управление временем жизни объекта, на который указывает возвращённый указатель. Объект должен оставаться валидным до его использования.

@tparam T Тип элементов, хранящихся в очереди.
@return Указатель на элемент типа T, если очередь не пуста, или nullptr, если очередь пуста.
*/