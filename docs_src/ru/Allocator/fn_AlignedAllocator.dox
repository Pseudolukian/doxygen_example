/**
@ingroup AllocatorGroup
@fn AlignedAllocator::AlignedAllocator(std::size_t size, std::size_t alignment)
@brief Конструктор аллокатора памяти.
@param[in] size Общий размер пула памяти в байтах.
@param[in] alignment Требуемое выравнивание (должно быть степенью двойки).
@throw std::bad_alloc Исключение если выделение памяти не удалось.

@details
**Реализация конструктора аллокатора**:
1. Конструктор создаёт пул памяти заданного размера, выровненный по указанной границе, с помощью функции `posix_memalign` из стандартной библиотеки C (`<cstdlib>`). 
2. Выравнивание должно быть степенью двойки (например, 16, 64 байта) и не менее размера указателя (`sizeof(void*)`). Конструктор инициализирует внутренние указатели для управления пулом, подготавливая его для выделения памяти через метод @ref AlignedAllocator::allocate "allocate()".
3. Сам конструктор создаётся с помощью ключевого слово `explicit`, которое предотвращает неявные преобразования типов, требуя явного вызова конструктора. Это защищает от ошибок, таких как случайное создание объекта из одного числа (например, `AlignedAllocator alloc = 1024;`), которое могло бы привести к созданию объекта с непредсказуемыми параметрами.
4. Параметры `size` (размер пула в байтах) и `alignment` (выравнивание в байтах) передаются в список инициализации, где они присваиваются членам класса `pool_size` и `alignment`. Эти члены хранят конфигурацию пула для последующего использования.
5. Объявляется указатель `ptr` типа `void*`, предназначенный для хранения адреса выделенной памяти. Тип `void*` — универсальный указатель, который может указывать на данные любого типа, но не поддерживает арифметику указателей или разыменование без приведения к конкретному типу. Он подходит для функций, таких как `posix_memalign`, которые возвращают адрес памяти без указания её типа.
6. Указатель `ptr` передаётся в функцию `posix_memalign`, которая возвращают адрес памяти без указания типа и выделяет блок памяти размером `size` байт, выровненный по границе `alignment`. Выравнивание должно быть степенью двойки и не менее `sizeof(void*)`.
7. Функция возвращает `0` при успешном выделение памяти или код ошибки при неудаче (например, если памяти недостаточно). Если выделение не удалось, выбрасывается исключение `std::bad_alloc`, сигнализирующее об ошибке аллокации.
8. Указатель `ptr` (типа `void*`) преобразуется в указатель типа `std::uint8_t*` с помощью `reinterpret_cast`, так как `void*` не позволяет выполнять арифметику указателей или доступ к данным. 
9. Тип `std::uint8_t` — это 8-битный беззнаковый целый тип (байт), который позволяет работать с памятью как с массивом байтов.
10. Результат присваивается члену класса `base`, который хранит начальный адрес пула памяти.
11. Устанавливается член класса `current` (типа `std::uint8_t*`) равным `base`. Это инициализирует текущую позицию в пуле памяти, с которой начнётся выделение блоков в методе @ref AlignedAllocator::allocate "allocate()". 
12. В начале `current` указывает на начало пула.
*/