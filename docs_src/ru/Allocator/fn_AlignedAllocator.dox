/**
@ingroup AllocatorGroup
@fn AlignedAllocator::AlignedAllocator(std::size_t size, std::size_t alignment)
@brief Конструктор аллокатора памяти.

@details

Конструктор создаёт пул памяти заданного размера, выровненный по указанной границе (выравнивание должно быть степенью двойки: 16, 64 байта и т.д), с помощью функции `posix_memalign` из стандартной библиотеки `<cstdlib>`.

Параметры `size` (размер пула в байтах) и `alignment` (выравнивание в байтах) передаются в список инициализации, где они присваиваются членам класса `pool_size` и `alignment`. Эти члены хранят конфигурацию пула для последующего использования.

Конструктор класса `AlignedAllocator` вызывается с типом данных `explicit` для предотвращения неявного преобразования типов. Такой код инициализации конструктора `AlignedAllocator allocator(1024);` вызовит ошибку `no matching function for call to ‘AlignedAllocator::AlignedAllocator(int)` и не приведет к созданию объекта с непредсказуемыми поведением. 

Задаётся указатель `ptr` типа `void*` (`void* ptr = nullptr;`), предназначенный для хранения адреса выделенной памяти. Далее он передаётся в функцию `posix_memalign` (`posix_memalign(&ptr, alignment, size) != 0`), которая возвращают адрес памяти без указания типа и выделяет блок памяти размером `size` байт, выровненный по границе `alignment`. Выравнивание должно быть степенью двойки и не менее `sizeof(void*)`.

Функция возвращает `0` при успешном выделение памяти или код ошибки при неудаче (например, если памяти недостаточно). Если выделение не удалось, выбрасывается исключение `std::bad_alloc`, сигнализирующее об ошибке аллокации.

Указатель `ptr` (типа `void*`) преобразуется в указатель типа `std::uint8_t*` с помощью `reinterpret_cast` (`base = reinterpret_cast<std::uint8_t*>(ptr);`), так как `void*` не позволяет выполнять арифметику указателей или доступ к данным. Тип `std::uint8_t` — это 8-битный беззнаковый целый тип (байт), который позволяет работать с памятью как с массивом байтов.

На последнем шаге, устанавливается член класса `current` (типа `std::uint8_t*`) равным `base` (`current = base;`). Это инициализирует текущую позицию в пуле памяти, с которой начнётся выделение блоков в методе @ref AlignedAllocator::allocate "allocate()".

@param[in] size Общий размер пула памяти в байтах.
@param[in] alignment Требуемое выравнивание (должно быть степенью двойки).
@throw std::bad_alloc Исключение если выделение памяти не удалось.
@var pool_size Размер пула памяти в байтах.
@var alignment Выравнивание пула памяти в байтах.
@var base Указатель на начало пула памяти.
@var current Указатель на текущую позицию в пуле памяти.
*/