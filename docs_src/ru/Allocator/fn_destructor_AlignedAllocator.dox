/**
@fn AlignedAllocator::~AlignedAllocator()
@brief Деструктор — освобождает пул памяти.

@details
Деструктор автоматически освобождает всю память, выделенную для пула, с помощью функции `std::free`. Деструктор вызывается автоматически при выходе объекта `AlignedAllocator` из области видимости.

Функция `std::free` определена в заголовочном файле `<cstdlib>`. Она используется для освобождения памяти, ранее выделенной функциями `malloc`, `calloc`, `realloc` или, как в данном случае, `posix_memalign`.
`std::free` принимает указатель на начало блока памяти (в данном случае `base`, типа `std::uint8_t*`, который был приведён из `void*`, возвращённого `posix_memalign`). Функция возвращает этот блок памяти операционной системе, помечая его как свободный для повторного использования.

Память, выделенная `posix_memalign`, совместима с `std::free`, так как `posix_memalign` является частью семейства функций управления памятью POSIX, использующих тот же механизм кучи (heap), что и `malloc`. После вызова `std::free(base)`, вся память пула (размером `pool_size`) освобождается одним вызовом, так как пул был выделен как единый блок.

Указатель `base` хранит начальный адрес пула памяти, установленный в конструкторе. Деструктор использует именно `base` (а не `current`), так как `std::free` требует указатель на начало выделенного блока, возвращённый `posix_memalign`.

@warning
- Не используйте указатели `base` или `current` после вызова деструктора, так как память освобождена, и доступ к ней приведёт к неопределённому поведению (например, к сбоям программы).
- Убедитесь, что память, на которую указывает `base`, была выделена с помощью `posix_memalign` (или другой совместимой функции), так как `std::free` корректно работает только с такими блоками.
*/